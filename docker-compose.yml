version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:13-alpine
    container_name: shoponline_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: shoponline
      POSTGRES_USER: shoponline_user
      POSTGRES_PASSWORD: shoponline_pass
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init_db.sql:/docker-entrypoint-initdb.d/init_db.sql:ro
    ports:
      - "5432:5432"
    networks:
      - shoponline_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U shoponline_user -d shoponline"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache and Session Store
  redis:
    image: redis:6-alpine
    container_name: shoponline_redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass shoponline_redis_pass
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf:ro
    ports:
      - "6379:6379"
    networks:
      - shoponline_network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "shoponline_redis_pass", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Django Backend API
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: shoponline_backend
    restart: unless-stopped
    environment:
      - DEBUG=True
      - SECRET_KEY=dev-secret-key-change-in-production
      - DATABASE_URL=postgresql://shoponline_user:shoponline_pass@db:5432/shoponline
      - REDIS_URL=redis://:shoponline_redis_pass@redis:6379/0
      - CELERY_BROKER_URL=redis://:shoponline_redis_pass@redis:6379/1
      - CELERY_RESULT_BACKEND=redis://:shoponline_redis_pass@redis:6379/2
      - EMAIL_HOST=smtp.gmail.com
      - EMAIL_PORT=587
      - EMAIL_USE_TLS=True
      - EMAIL_HOST_USER=${EMAIL_HOST_USER}
      - EMAIL_HOST_PASSWORD=${EMAIL_HOST_PASSWORD}
      - DEFAULT_FROM_EMAIL=noreply@shoponline.com
      - MTN_MOMO_API_KEY=${MTN_MOMO_API_KEY}
      - MTN_MOMO_API_SECRET=${MTN_MOMO_API_SECRET}
      - AIRTEL_API_KEY=${AIRTEL_API_KEY}
      - AIRTEL_API_SECRET=${AIRTEL_API_SECRET}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_STORAGE_BUCKET_NAME=${AWS_STORAGE_BUCKET_NAME}
      - AWS_S3_REGION_NAME=us-east-1
      - USE_S3=${USE_S3:-False}
      - ALLOWED_HOSTS=localhost,127.0.0.1,backend,0.0.0.0
      - CORS_ALLOWED_ORIGINS=http://localhost:3000,http://127.0.0.1:3000
      - CSRF_TRUSTED_ORIGINS=http://localhost:3000,http://127.0.0.1:3000
    volumes:
      - .:/app
      - media_files:/app/media
      - static_files:/app/staticfiles
      - logs:/app/logs
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - shoponline_network
    command: >
      sh -c "python manage.py wait_for_db &&
             python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             python manage.py runserver 0.0.0.0:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery Worker
  celery:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: shoponline_celery
    restart: unless-stopped
    environment:
      - DEBUG=True
      - SECRET_KEY=dev-secret-key-change-in-production
      - DATABASE_URL=postgresql://shoponline_user:shoponline_pass@db:5432/shoponline
      - REDIS_URL=redis://:shoponline_redis_pass@redis:6379/0
      - CELERY_BROKER_URL=redis://:shoponline_redis_pass@redis:6379/1
      - CELERY_RESULT_BACKEND=redis://:shoponline_redis_pass@redis:6379/2
      - EMAIL_HOST=smtp.gmail.com
      - EMAIL_PORT=587
      - EMAIL_USE_TLS=True
      - EMAIL_HOST_USER=${EMAIL_HOST_USER}
      - EMAIL_HOST_PASSWORD=${EMAIL_HOST_PASSWORD}
      - MTN_MOMO_API_KEY=${MTN_MOMO_API_KEY}
      - MTN_MOMO_API_SECRET=${MTN_MOMO_API_SECRET}
      - AIRTEL_API_KEY=${AIRTEL_API_KEY}
      - AIRTEL_API_SECRET=${AIRTEL_API_SECRET}
    volumes:
      - .:/app
      - media_files:/app/media
      - logs:/app/logs
    depends_on:
      - db
      - redis
      - backend
    networks:
      - shoponline_network
    command: >
      sh -c "python manage.py wait_for_db &&
             celery -A shoponline_project worker --loglevel=info --concurrency=2"
    healthcheck:
      test: ["CMD", "celery", "-A", "shoponline_project", "inspect", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery Beat Scheduler
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: shoponline_celery_beat
    restart: unless-stopped
    environment:
      - DEBUG=True
      - SECRET_KEY=dev-secret-key-change-in-production
      - DATABASE_URL=postgresql://shoponline_user:shoponline_pass@db:5432/shoponline
      - REDIS_URL=redis://:shoponline_redis_pass@redis:6379/0
      - CELERY_BROKER_URL=redis://:shoponline_redis_pass@redis:6379/1
      - CELERY_RESULT_BACKEND=redis://:shoponline_redis_pass@redis:6379/2
    volumes:
      - .:/app
      - logs:/app/logs
    depends_on:
      - db
      - redis
      - backend
    networks:
      - shoponline_network
    command: >
      sh -c "python manage.py wait_for_db &&
             celery -A shoponline_project beat --loglevel=info --scheduler django_celery_beat.schedulers:DatabaseScheduler"

  # Celery Flower (Monitoring)
  flower:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: shoponline_flower
    restart: unless-stopped
    environment:
      - CELERY_BROKER_URL=redis://:shoponline_redis_pass@redis:6379/1
      - CELERY_RESULT_BACKEND=redis://:shoponline_redis_pass@redis:6379/2
      - FLOWER_BASIC_AUTH=admin:flower123
    ports:
      - "5555:5555"
    depends_on:
      - redis
      - celery
    networks:
      - shoponline_network
    command: celery -A shoponline_project flower --address=0.0.0.0 --port=5555

  # Nginx Reverse Proxy (Development)
  nginx:
    image: nginx:alpine
    container_name: shoponline_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/nginx/sites-available:/etc/nginx/sites-available:ro
      - ./config/nginx/sites-enabled:/etc/nginx/sites-enabled:ro
      - static_files:/app/staticfiles:ro
      - media_files:/app/media:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - backend
    networks:
      - shoponline_network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Mailhog (Email Testing in Development)
  mailhog:
    image: mailhog/mailhog:latest
    container_name: shoponline_mailhog
    restart: unless-stopped
    ports:
      - "1025:1025"  # SMTP server
      - "8025:8025"  # Web UI
    networks:
      - shoponline_network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  media_files:
    driver: local
  static_files:
    driver: local
  logs:
    driver: local

networks:
  shoponline_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16